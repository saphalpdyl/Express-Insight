<html>
  <head>
    <link rel= "stylesheet" href= "https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" >
    <link rel="stylesheet" href="/css/output.css">
    <script src="
      https://cdn.jsdelivr.net/npm/chartist@1.3.0/dist/index.umd.min.js
      "></script>
    <link href="
      https://cdn.jsdelivr.net/npm/chartist@1.3.0/dist/index.min.css
      " rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/simple-datatables@latest/dist/style.css" rel="stylesheet" type="text/css">
    <script src="https://cdn.jsdelivr.net/npm/simple-datatables@latest" type="text/javascript"></script>
  </head>
  <body class="p-4">
    <div class="flex justify-between items-center mb-3">
      <div class="flex gap-2 items-baseline">
        <i class="las la-search text-4xl"></i>
        <span class="text-3xl font-light">Express Insight</span>
        {{#if config.projectName }}
          <span class="font-light"> - {{ config.projectName }}</span>
        {{/if}}
      </div>
      <div class="flex justify-end">
        <span class="monospace font-bold text-xs text-gray-800">Made with ðŸ’– by saphalpdyl</span>
      </div>
    </div>

    <div class="grid lg:grid-cols-3 grid-cols-2">
      <div class="order-1 flex flex-col px-4">
        <div class="grid grid-cols-3 gap-4">
          {{> dashboardCard cardTitle="API Traffic" cardValue=requestLogs.length cardAfter="requests"}}
          {{> dashboardCard cardTitle="Avg. Traffic" cardValue=avgRequestsPerDay cardAfter="requests/day"}}
          {{> dashboardCard cardTitle="Avg. Response Time" cardValue=avgResponseTime cardAfter="ms"}}
          {{> dashboardCard cardTitle="Avg. Response Size" cardValue=avgResponseSize cardAfter="bytes"}}
        </div>

      </div>
      <div class="order-3 lg:order-2">
        <div id="chart"></div>
      </div>
      <div class="border-gray-300 border-s-2 pl-2 order-2 lg:order-3">
        <span class="text-xl font-extralight block mb-2">Configuration</span> 
        <pre class="font-bold text-sm">{{> jsonRenderer config=config}}</pre>
      </div>
    </div>
    <div class="mx-4 px-2">
      {{#if error }}
        <div class="overflow-auto text-xs mb-10" id="errorRows">
          <span class="text-2xl font-bold text-zinc-600">Error Logs</span>
          {{> datetimeSelectForm }}
        </div>
      {{else}}
        <div class="overflow-auto text-xs mb-10" id="requestRows">
          <span class="text-2xl font-bold text-zinc-600">Request Logs</span>
          {{> datetimeSelectForm }}
        </div>
      {{/if}}
      <div class="scroll-auto overflow-y-auto overflow-x-hidden w-100 text-zinc-600">
        <h3 class="text-2xl font-bold">Today's Log File</h3>
        <pre class="text-xs font-semibold">
          {{ logFile }}
        </pre>
      </div>
    </div>
    
    <script>
      // CONSTANTS
      // Headings index
      REQUEST_HEADING_ID = 0
      REQUEST_HEADING_REQUEST_ID = 1
      REQUEST_HEADING_TIMESTAMP = 2
      REQUEST_HEADING_METHOD = 3
      REQUEST_HEADING_URL = 4
      REQUEST_HEADING_CLIENT_IP = 5
      REQUEST_HEADING_USER_AGENT = 6
      REQUEST_HEADING_CONTENT_TYPE = 7
      REQUEST_HEADING_REFERER = 8
      REQUEST_HEADING_X_FORWARDED_FOR = 9
      REQUEST_HEADING_QUERY_PARAMS = 10
      REQUEST_HEADING_REQUEST_BODY = 11
    </script>
    
    <script>
      const activityDataJson = decodeURIComponent("{{ activityData }}");
      const activityData = JSON.parse(activityDataJson);

      const data = activityData.map(e => ({
        x: new Date(e.interval_start),
        y: e.request_count,
      }));
      new Chartist.BarChart('#chart', {
        series: [
          {
            name: "Requests",
            data,
          }
        ]
      }, {
        showArea: true,
        showPoint: true,
        distributeSeries: true,
        axisX: {
          type: Chartist.FixedScaleAxis,
          divisor: 10,
          labelInterpolationFnc: value =>
            new Date(value).toLocaleString(undefined, {
            timeStyle: "short"
          })
        }
      });
    </script>

    <script>
      const requestRowsJson = decodeURIComponent("{{ requestRows }}");

      const { DataTable, convertJSON } = simpleDatatables;
      const requestRows = convertJSON({
        data: requestRowsJson,
      });
      const requestRowsTableElement = document.querySelector("#requestRows");

      const datatable = new DataTable(requestRowsTableElement, {
        data: {
          headings: requestRows.headings.map(h => {
            return h.split("_").join(" ").replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toUpperCase());
          }),
          data: requestRows.data,
        },
        perPage: 50,
        columns: [
          {
            select: [1,2,3,4,5,6,7,8,9,10,11,12],
            render: (data, td, dataIndex, cellIndex) => {
              if (data[0].data == "null") {
                return "-";
              }
            }
          },
          {
            select: REQUEST_HEADING_METHOD,
            render: (data, td, dataIndex, cellIndex) => {
              const cellData = data[0].data;
              
              if (cellData === "GET") {
                td.attributes.class = "text-emerald-500";
              } else if (cellData === "POST") {
                td.attributes.class = "text-blue-500";
              } else if (cellData === "PUT") {
                td.attributes.class = "text-amber-500";
              } else if (cellData === "DELETE") {
                td.attributes.class = "text-red-500";
              } else if (cellData === "PATCH") {
                td.attributes.class = "text-indigo-500";
              } else if (cellData === "HEAD") {
                td.attributes.class = "text-purple-500";
              } else if (cellData === "OPTIONS") {
                td.attributes.class = "text-cyan-500";
              } else if (cellData === "TRACE") {
                td.attributes.class = "text-pink-500";
              } else {
                td.attributes.class = "text-gray-500";
              }
            }
          },
          {
            select: REQUEST_HEADING_TIMESTAMP,
            render: (data, td, dataIndex, cellIndex) => {
              return `<td>${(new Date(data[0].data)).toLocaleString()}</td>`;
            }
          },
          {
            select: REQUEST_HEADING_URL,
            render: (data, td, dataIndex, cellIndex) => {
              return `<td>${data[0].data.split("?")[0]}</td>`
            }
          }
        ]
      });

    </script>
  </body>
</html>